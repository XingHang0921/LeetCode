class Solution:
    def lengthAfterTransformations(self, s: str, t: int) -> int:
        #transform
        def nextAlpha(char):
            if char == 'z':
                return 'ab'
            return chr(((ord(char) - 97 + 1) % 26) + 97)
        while t:
            s = ''.join(nextAlpha(char) for char in s)
            print(s)
            t -= 1
        #count
        res = len(s)
        return res

Output Limit Exceeded

class Solution:
    def lengthAfterTransformations(self, s: str, t: int) -> int:
        #transform
        MOD = 10 ** 9 + 7
        cnt = [0] * 26
        
        for c in s:
            cnt[ord(c) - ord('a')] += 1

        for i in range(t):
            nxt = [0] * 26
            nxt[0] = cnt[25]
            nxt[1] = cnt[25]  + cnt[0]
            for i in range(2,26):
                nxt[i] = cnt[i-1]
            cnt = nxt
        return sum(cnt) % MOD

use array to simulate the number of count of each character, still remain the essence of keeping frequency of each character.
O( len(s) + t)
O(1)
