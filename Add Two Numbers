class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        myHead = ListNode()
        ptr = myHead
        carry = 0
        while l1 or l2:
            val1 = 0 if not l1 else l1.val
            val2 = 0 if not l2 else l2.val                
            add = val1 + val2 + carry
            if add >= 10:
                add = add % 10
                carry = 1
            else:
                carry = 0
            
            print(add)
            nextNode = ListNode(add)
            ptr.next = nextNode
            ptr = ptr.next if ptr else None
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        if carry == 1:
            nextNode = ListNode(carry)
            ptr.next = nextNode
        return myHead.next


second attempt

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        cur = dummy
        carry = 0
        while l1 or l2 or carry:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0

            total = val1 + val2 + carry
            carry = total // 10
            digit = total % 10

            cur.next = ListNode(digit)
            cur = cur.next

            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        return dummy.next

        
