class Solution:
    def minWindow(self, s: str, t: str) -> str:
        res = ""
        if not t or not s:
            return res

        l = r = 0
        tCount = Counter(t)
        sCount = Counter(s)
        need = len(t)
        have = 0
        while r <= len(s):
            if have === need and len(res) >= s[l:r] or res == '':
                res = s[l:r]
                if s[l] in sCount:
                    have -= 1
                l += 1
            for 
            if 
        return res



        
        //update the res
            when count of char in t  >= t itself
        
        window should be
        len(s) - len(t)
        biggest - small
        the whole is a substring
            vs
        the same string as substring

        or none

class Solution:
    def minWindow(self, s: str, t: str) -> str:
        res = [-1,-1]
        if not t or not s:
            return ''

        countT, window = {}, {}
        for char in t:
            countT[char] = 1 + countT.get(char,0)
        need = len(countT)
        have, l = 0, 0
        resLen = float('infinity')
        for r in range(len(s)):
            char = s[r]
            window[char] = 1 + window.get(char, 0)
            if char in countT and window[char] == countT[char]:
                have += 1
            while have == need:
                if(r - l + 1) < resLen:
                    res = [l, r]
                    resLen = (r - l + 1)
                window[s[l]] -= 1
                if s[l] in countT and window[s[l]] < countT[s[l]]:
                    have -= 1
                l += 1
        l, r = res
        return s[l:r + 1] if resLen != float('infinity') else ''

NEXT DAY CHECK
