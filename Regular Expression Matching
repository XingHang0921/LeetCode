class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        cache = {}

        def dfs(i, j):
            if(i, j) in cache:
                return cache[(i, j)]
            if i >= len(s) and j >= len(p):
                return True

            if j >= len(p):
                return False

            match = i < len(s) and (s[i] == p[j] or p[j] == ".")
            if (j + 1) < len(p) and p[j + 1] == "*":
                cache[(i, j)] = ((match and dfs(i + 1, j))
                                 or dfs(i, j + 2))
                    # more then 0, a = a*          0 match, skip ()*
                # star can have 0 or 1 or multiple
                return cache[(i, j)]
            if match:
                cache[(i, j)] = dfs(i + 1, j+ 1)
                return cache[(i, j)]
            
                # if match meaing a = a move on to next

            cache[(i, j)] = False
            return cache[(i, j)]

        return dfs(0,0)

used memoization in turns of cache to store previous processed computation to avoid further repeated computation,
eliminated time complexity of 2^n to m*n for m is len(s) and n is len(p)
