class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        res = 0
        curSum = 0
        prefixSums = {0:1}

        for n in nums:
            curSum += n
            diff = curSum - k
            res += prefixSums.get(diff, 0)
            prefixSums[curSum] = prefixSums.get(curSum, 0) + 1
        return res
Time Complexity: O(N) because we are going over the array once, we are
    constantly updating the sum from beginning and through the diff we can check in
    the hash map of how many ways can we get a subarray of sum K
Space complexity: O(Nï¼‰because everytime when a sum is generated we put it in the hash map
