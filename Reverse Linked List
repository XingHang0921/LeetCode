# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev = None
        curr = head

        if not head:
            return head
        while curr.next:
            tempHead = curr.next
            curr.next = prev
            prev = curr
            curr = tempHead
        curr.next = prev
        return curr
O(N)
o(1)


V2: instead of check head.next we can check the head itself
it will avoid the last swap case to fail and need a  extra line to handle.
However pretty much the same

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev = None
        curr = head

        if not head:
            return head
        while curr:
            tempHead = curr.next
            curr.next = prev
            prev = curr
            curr = tempHead
        return prev

        

